#NeetCode Practice
#Two Integer Sum (Easy)

#Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j.
#You may assume that every input has exactly one pair of indices i and j that satisfy the condition.
#Return the answer with the smaller index first.
from typing import List

class Solution:
    def twoSum(nums: List[int], target: int) -> List[int]:
        # hash map to keep track of the existing numbers in the list 
        # iterate through the loop and see if an existing number in the hash map exists. 
        # for i, num in enumerate(nums):
        #is a common Python idiom for iterating over a list (or other iterable) 
        # when you need both the index and the value of each element.

        complements = {} 
        for i, num in enumerate(nums):
            difference = target - num
            if difference in complements: 
                if(i > complements[difference]):
                    return [complements[difference], i]
                else:
                    return [i, complements[difference]]
            else:
                 complements[num] = i

    print(twoSum([2, 7, 11, 15], 9))

    # I originally made the mistake of storing the difference 
    # the fix was to store the actual number, since that would be the number that is missing from the pair 
    # I initially stored the compliment because i was looking for the index that matched 
    # but this was but a brainfart :) 
        